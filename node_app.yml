#The Nautilus development team has completed development of one of the node applications which they are planning deploy on a Kubernetes cluster.
#They recently had a meeting with the DevOps team to share their requirements.
#Based on the DevOps team has listed out the exact requirement to setup the cluster the same way. 
#Fine below more details

#Create a namespace named node-namespace-nautilus.

#Create a deployment named node-deployment-nautilus under this new namespace. 
#Replica count should be 2, container should be named as node-container-nautilus, use gcr.io/kodekloud/centos-ssh-enabled:node image and container port should be 80.

#Create a service named node-service-nautilus. Service type should be NodePort, target port should be 8080, port should be 80 and nodePort should be 30012.

#Make sure all pods are in Running state after the deployment.

#You can check the application page by clicking on + button on top left corner and clicking on Select port to view on Host 1, then enter your nodePort.

#You can use any labels as per your choice.

#Note: The kubectl on jump_host has been configured to work with the kubernetes cluster.
---
kind: Deployment
apiVersion: apps/v1
metadata:
 name: node-deployment-nautilus
 namespace: node-namespace-nautilus
 labels:
   app: node
spec:
 replicas: 2
 selector:
  matchLabels:
   app: node
 template:
  metadata:
    labels:
      app: node
  spec:
    containers:
      - name: node-container-nautilus
        image: gcr.io/kodekloud/centos-ssh-enabled:node
        ports: 
          - containerPort: 80
...
---
kind: Service
apiVersion: v1
metadata:
  name: node-service-nautilus
  namespace: node-namespace-nautilus
  labels:
    app: node
spec:
  selector:
    app: node
  type: NodePort
  ports:
    - targetPort: 8080
      nodePort: 80
      port: 30012
...