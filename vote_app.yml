The Nautilus DevOps team is running a voting app on their old infrastructure that they want to migrate to the Kubernetes cluster.
They have already prepared the requirements related to the application stack.
As per details given below deploy the voting app on the Kubernetes cluster:

Create a namespace which should be named vote.

kubectl create namespace vote

Create a service vote-service under the namespace you created.
Port should be 5000, targetPort should be 80 and nodePort should be 31000.
Service endpoint exposes deployment vote-deployment under namespace vote.

kind: Service
apiVersion: v1
metadata:
 namespace: vote
 name: vote-service
 labels:
  app: vote-before
spec:
 type: NodePort
 selector:
  app: vote-before
 ports:
  - targetPort: 80
    nodePort: 31000
    port: 5000 

Create a deployment vote-deployment under the namespace you created.
Replicas count should be 1, the container name should be vote, use kodekloud/examplevotingapp_vote:before image ( use exact name of image as mentioned ) and containerPort should be 80.

kind: Deployment
apiVersion: apps/v1
metadata:
 namespace: vote
 name: vote-deployment
 labels:
  app: vote-before
spec:
 replicas: 1
 selector:
  matchLabels: 
   app: vote-before
 template:
  metadata:
   labels:
    app: vote-before
  spec:
   containers:
   - name: vote
     image: kodekloud/examplevotingapp_vote:before
     ports:
     - containerPort: 80
---
Create a service redis under the same namespace.
Port should be 6379, targetPort should be 6379, its type should be ClusterIP service endpoint exposes deployment redis-deployment under namespace vote.

kind: Service
apiVersion: v1
metadata: 
 name: redis
 namespace: vote
 labels:
  app: redis-app
spec:
 type: ClusterIP
 selector:
  app: redis-app
 ports:
  - targetPort: 6379
    port: 6379
---

Create a redis deployment redis-deployment under the same namespace.
Replica count should be 1.
The container name should be redis use redis:alpine image ( use exact name as mentioned ).
Volume type should be EmptyDir, volumeName should be redis-data and its mountPath should be /data

kind: Deployment
apiVersion: apps/v1
metadata: 
 name: redis-deployment
 namespace: vote
 labels:
  app: redis-app
spec:
 replicas: 1
 selector:
  matchLabels:
   app: redis-app
 template:
  metadata:
   labels:
    app: redis-app
  spec:
   containers:
   - name: redis
     image: redis:alpine
     ports:
     - containerPort: 6379
     volumeMounts:
     - mountPath: /data
       name: redis-data
   volumes:
   - name: redis-data
     emptyDir: {}
---

Create a deployment worker under the same namespace.
Its replicas count should be 1.
The container name should be worker, use kodekloud/examplevotingapp_worker image ( use exact name of image as mentioned ).

kind: Deployment
apiVersion: apps/v1
metadata: 
 name: worker
 namespace: vote
 labels:
  app: worker-app
spec:
 replicas: 1
 selector:
  matchLabels:
   app: worker-app
 template:
  metadata:
   labels:
    app: worker-app
  spec:
   containers:
   - name: worker
     image: kodekloud/examplevotingapp_worker
---

Create a service db under the same namespace.
Port shold be 5432, targetPort should be 5432 and its type should be ClusterIP.

kind: Service
apiVersion: v1
metadata:
 name: db
 namespace: vote
 labels:
  app: db-vote
spec:
  type: ClusterIP
  selector:
   app: db-vote
  ports:
   - targetPort: 5432
     port: 5432 
---


Create a deployment db-deployment under the same namespace.
Its replica count should be 1.
The container name should be postgres, use postgres:9.4 image ( use exact name of image as mentioned ).
Define ENV as first env name should be POSTGRES_USER and its value should be postgres, second env name should be POSTGRES_PASSWORD and its value should be postgres and third env name should be POSTGRES_HOST_AUTH_METHOD and its value should be trust.
Volume type should be EmptyDir, volumeName should be db-data and its mountPath should be /var/lib/postgresql/data.

kind: Deployment
apiVersion: apps/v1
metadata:
  name: db-deployment
  namespace: vote
  labels:
   app: db-vote
spec:
 replicas: 1
 selector:
  matchLabels: 
   app: db-vote 
 template:
   metadata:
     labels:
      app: db-vote
   spec:
    containers:
    -  name: postgres
       image: postgres:9.4
       ports:
       - containerPort: 5432
       volumeMounts:
       - mountPath: /var/lib/postgresql/data
         name: db-data
       env:
       - name: POSTGRES_USER
         value: postgres
       - name: POSTGRES_PASSWORD
         value: postgres
       - name: POSTGRES_HOST_AUTH_METHOD
         value: trust
    volumes:
    - name: db-data
      emptyDir: {}
---

Create a deployment for the result which should be named result-deployment under the same namespace.
Configure spec as replica should be 1. The container name should be result, use image kodekloud/examplevotingapp_result:before ( use exact name of image as mentioned ) and the containerPort should be 80.

kind: Deployment
apiVersion: apps/v1
metadata:
 name: result-deployment
 namespace: vote
 labels:
  app: result-app
spec:
 replicas: 1
 selector:
  matchLabels:
   app: result-app
 template:
  metadata:
    labels:
     app: result-app
  spec:
   containers:
   - name: result
     image: kodekloud/examplevotingapp_result:before
     ports:
     - containerPort: 80
---

Create a service for result which should be named as result-service under the same namespace. Configure spec as port should be 5001, targetPort should be 80 and nodePort should be 31001 and its type should be NodePort.

kind: Service
apiVersion: v1
metadata:
 name: result-service
 namespace: vote
 labels:
  app: result-app
spec:
 type: NodePort
 selector:
   app: result-app
 ports:
  - port: 5001
    targetPort: 80
    nodePort: 31001
---

You can use any labels as per your choice.

Note: The kubectl on jump_host has been configured to work with the kubernetes cluster.

